Start 1
job controller
input_batch on FPropDefaultTheta 1 None
num_splits 4
batch {'bucket_key': <tf.Tensor 'GenericInput:2' shape=<unknown> dtype=int32>, 'ids': <tf.Tensor 'AsciiToTokenId:0' shape=(128, 1024) dtype=int32>, 'labels': <tf.Tensor 'AsciiToTokenId:1' shape=(128, 1024) dtype=int32>, 'paddings': <tf.Tensor 'AsciiToTokenId:2' shape=(128, 1024) dtype=float32>, 'weights': <tf.Tensor 'sub_1:0' shape=(128, 1024) dtype=float32>, 'word_count': <tf.Tensor 'GenericInput:1' shape=(128,) dtype=int32>}
batch.Flatten <bound method NestedMap.Flatten of {'bucket_key': <tf.Tensor 'GenericInput:2' shape=<unknown> dtype=int32>, 'ids': <tf.Tensor 'AsciiToTokenId:0' shape=(128, 1024) dtype=int32>, 'labels': <tf.Tensor 'AsciiToTokenId:1' shape=(128, 1024) dtype=int32>, 'paddings': <tf.Tensor 'AsciiToTokenId:2' shape=(128, 1024) dtype=float32>, 'weights': <tf.Tensor 'sub_1:0' shape=(128, 1024) dtype=float32>, 'word_count': <tf.Tensor 'GenericInput:1' shape=(128,) dtype=int32>}>
num_splits 4
splits Tensor("Add:0", shape=(4,), dtype=int32, device=/job:local/replica:0/task:0/device:GPU:0)
splits 2 Tensor("Identity_1:0", shape=(4,), dtype=int32, device=/job:local/replica:0/task:0/device:GPU:0)
xs [<tf.Tensor 'GenericInput:2' shape=<unknown> dtype=int32>, <tf.Tensor 'AsciiToTokenId:0' shape=(128, 1024) dtype=int32>, <tf.Tensor 'AsciiToTokenId:1' shape=(128, 1024) dtype=int32>, <tf.Tensor 'AsciiToTokenId:2' shape=(128, 1024) dtype=float32>, <tf.Tensor 'sub_1:0' shape=(128, 1024) dtype=float32>, <tf.Tensor 'GenericInput:1' shape=(128,) dtype=int32>]
split_xs [[<tf.Tensor 'split:0' shape=<unknown> dtype=int32>, <tf.Tensor 'split:1' shape=<unknown> dtype=int32>, <tf.Tensor 'split:2' shape=<unknown> dtype=int32>, <tf.Tensor 'split:3' shape=<unknown> dtype=int32>], [<tf.Tensor 'split_1:0' shape=(32, 1024) dtype=int32>, <tf.Tensor 'split_1:1' shape=(32, 1024) dtype=int32>, <tf.Tensor 'split_1:2' shape=(32, 1024) dtype=int32>, <tf.Tensor 'split_1:3' shape=(32, 1024) dtype=int32>], [<tf.Tensor 'split_2:0' shape=(32, 1024) dtype=int32>, <tf.Tensor 'split_2:1' shape=(32, 1024) dtype=int32>, <tf.Tensor 'split_2:2' shape=(32, 1024) dtype=int32>, <tf.Tensor 'split_2:3' shape=(32, 1024) dtype=int32>], [<tf.Tensor 'split_3:0' shape=(32, 1024) dtype=float32>, <tf.Tensor 'split_3:1' shape=(32, 1024) dtype=float32>, <tf.Tensor 'split_3:2' shape=(32, 1024) dtype=float32>, <tf.Tensor 'split_3:3' shape=(32, 1024) dtype=float32>], [<tf.Tensor 'split_4:0' shape=(32, 1024) dtype=float32>, <tf.Tensor 'split_4:1' shape=(32, 1024) dtype=float32>, <tf.Tensor 'split_4:2' shape=(32, 1024) dtype=float32>, <tf.Tensor 'split_4:3' shape=(32, 1024) dtype=float32>], [<tf.Tensor 'split_5:0' shape=(32,) dtype=int32>, <tf.Tensor 'split_5:1' shape=(32,) dtype=int32>, <tf.Tensor 'split_5:2' shape=(32,) dtype=int32>, <tf.Tensor 'split_5:3' shape=(32,) dtype=int32>]]
field_split [[<tf.Tensor 'split:0' shape=<unknown> dtype=int32>, <tf.Tensor 'split:1' shape=<unknown> dtype=int32>, <tf.Tensor 'split:2' shape=<unknown> dtype=int32>, <tf.Tensor 'split:3' shape=<unknown> dtype=int32>], [<tf.Tensor 'split_1:0' shape=(32, 1024) dtype=int32>, <tf.Tensor 'split_1:1' shape=(32, 1024) dtype=int32>, <tf.Tensor 'split_1:2' shape=(32, 1024) dtype=int32>, <tf.Tensor 'split_1:3' shape=(32, 1024) dtype=int32>], [<tf.Tensor 'split_2:0' shape=(32, 1024) dtype=int32>, <tf.Tensor 'split_2:1' shape=(32, 1024) dtype=int32>, <tf.Tensor 'split_2:2' shape=(32, 1024) dtype=int32>, <tf.Tensor 'split_2:3' shape=(32, 1024) dtype=int32>], [<tf.Tensor 'split_3:0' shape=(32, 1024) dtype=float32>, <tf.Tensor 'split_3:1' shape=(32, 1024) dtype=float32>, <tf.Tensor 'split_3:2' shape=(32, 1024) dtype=float32>, <tf.Tensor 'split_3:3' shape=(32, 1024) dtype=float32>], [<tf.Tensor 'split_4:0' shape=(32, 1024) dtype=float32>, <tf.Tensor 'split_4:1' shape=(32, 1024) dtype=float32>, <tf.Tensor 'split_4:2' shape=(32, 1024) dtype=float32>, <tf.Tensor 'split_4:3' shape=(32, 1024) dtype=float32>], [<tf.Tensor 'split_5:0' shape=(32,) dtype=int32>, <tf.Tensor 'split_5:1' shape=(32,) dtype=int32>, <tf.Tensor 'split_5:2' shape=(32,) dtype=int32>, <tf.Tensor 'split_5:3' shape=(32,) dtype=int32>]]
j 0
split_flatten [<tf.Tensor 'split:0' shape=<unknown> dtype=int32>, <tf.Tensor 'split_1:0' shape=(32, 1024) dtype=int32>, <tf.Tensor 'split_2:0' shape=(32, 1024) dtype=int32>, <tf.Tensor 'split_3:0' shape=(32, 1024) dtype=float32>, <tf.Tensor 'split_4:0' shape=(32, 1024) dtype=float32>, <tf.Tensor 'split_5:0' shape=(32,) dtype=int32>]
split {'bucket_key': <tf.Tensor 'split:0' shape=<unknown> dtype=int32>, 'ids': <tf.Tensor 'split_1:0' shape=(32, 1024) dtype=int32>, 'labels': <tf.Tensor 'split_2:0' shape=(32, 1024) dtype=int32>, 'paddings': <tf.Tensor 'split_3:0' shape=(32, 1024) dtype=float32>, 'weights': <tf.Tensor 'split_4:0' shape=(32, 1024) dtype=float32>, 'word_count': <tf.Tensor 'split_5:0' shape=(32,) dtype=int32>}
j 1
split_flatten [<tf.Tensor 'split:1' shape=<unknown> dtype=int32>, <tf.Tensor 'split_1:1' shape=(32, 1024) dtype=int32>, <tf.Tensor 'split_2:1' shape=(32, 1024) dtype=int32>, <tf.Tensor 'split_3:1' shape=(32, 1024) dtype=float32>, <tf.Tensor 'split_4:1' shape=(32, 1024) dtype=float32>, <tf.Tensor 'split_5:1' shape=(32,) dtype=int32>]
split {'bucket_key': <tf.Tensor 'split:1' shape=<unknown> dtype=int32>, 'ids': <tf.Tensor 'split_1:1' shape=(32, 1024) dtype=int32>, 'labels': <tf.Tensor 'split_2:1' shape=(32, 1024) dtype=int32>, 'paddings': <tf.Tensor 'split_3:1' shape=(32, 1024) dtype=float32>, 'weights': <tf.Tensor 'split_4:1' shape=(32, 1024) dtype=float32>, 'word_count': <tf.Tensor 'split_5:1' shape=(32,) dtype=int32>}
j 2
split_flatten [<tf.Tensor 'split:2' shape=<unknown> dtype=int32>, <tf.Tensor 'split_1:2' shape=(32, 1024) dtype=int32>, <tf.Tensor 'split_2:2' shape=(32, 1024) dtype=int32>, <tf.Tensor 'split_3:2' shape=(32, 1024) dtype=float32>, <tf.Tensor 'split_4:2' shape=(32, 1024) dtype=float32>, <tf.Tensor 'split_5:2' shape=(32,) dtype=int32>]
split {'bucket_key': <tf.Tensor 'split:2' shape=<unknown> dtype=int32>, 'ids': <tf.Tensor 'split_1:2' shape=(32, 1024) dtype=int32>, 'labels': <tf.Tensor 'split_2:2' shape=(32, 1024) dtype=int32>, 'paddings': <tf.Tensor 'split_3:2' shape=(32, 1024) dtype=float32>, 'weights': <tf.Tensor 'split_4:2' shape=(32, 1024) dtype=float32>, 'word_count': <tf.Tensor 'split_5:2' shape=(32,) dtype=int32>}
j 3
split_flatten [<tf.Tensor 'split:3' shape=<unknown> dtype=int32>, <tf.Tensor 'split_1:3' shape=(32, 1024) dtype=int32>, <tf.Tensor 'split_2:3' shape=(32, 1024) dtype=int32>, <tf.Tensor 'split_3:3' shape=(32, 1024) dtype=float32>, <tf.Tensor 'split_4:3' shape=(32, 1024) dtype=float32>, <tf.Tensor 'split_5:3' shape=(32,) dtype=int32>]
split {'bucket_key': <tf.Tensor 'split:3' shape=<unknown> dtype=int32>, 'ids': <tf.Tensor 'split_1:3' shape=(32, 1024) dtype=int32>, 'labels': <tf.Tensor 'split_2:3' shape=(32, 1024) dtype=int32>, 'paddings': <tf.Tensor 'split_3:3' shape=(32, 1024) dtype=float32>, 'weights': <tf.Tensor 'split_4:3' shape=(32, 1024) dtype=float32>, 'word_count': <tf.Tensor 'split_5:3' shape=(32,) dtype=int32>}
input_batch on FPropDefaultTheta 2 [{'bucket_key': <tf.Tensor 'split:0' shape=<unknown> dtype=int32>, 'ids': <tf.Tensor 'split_1:0' shape=(32, 1024) dtype=int32>, 'labels': <tf.Tensor 'split_2:0' shape=(32, 1024) dtype=int32>, 'paddings': <tf.Tensor 'split_3:0' shape=(32, 1024) dtype=float32>, 'weights': <tf.Tensor 'split_4:0' shape=(32, 1024) dtype=float32>, 'word_count': <tf.Tensor 'split_5:0' shape=(32,) dtype=int32>}, {'bucket_key': <tf.Tensor 'split:1' shape=<unknown> dtype=int32>, 'ids': <tf.Tensor 'split_1:1' shape=(32, 1024) dtype=int32>, 'labels': <tf.Tensor 'split_2:1' shape=(32, 1024) dtype=int32>, 'paddings': <tf.Tensor 'split_3:1' shape=(32, 1024) dtype=float32>, 'weights': <tf.Tensor 'split_4:1' shape=(32, 1024) dtype=float32>, 'word_count': <tf.Tensor 'split_5:1' shape=(32,) dtype=int32>}, {'bucket_key': <tf.Tensor 'split:2' shape=<unknown> dtype=int32>, 'ids': <tf.Tensor 'split_1:2' shape=(32, 1024) dtype=int32>, 'labels': <tf.Tensor 'split_2:2' shape=(32, 1024) dtype=int32>, 'paddings': <tf.Tensor 'split_3:2' shape=(32, 1024) dtype=float32>, 'weights': <tf.Tensor 'split_4:2' shape=(32, 1024) dtype=float32>, 'word_count': <tf.Tensor 'split_5:2' shape=(32,) dtype=int32>}, {'bucket_key': <tf.Tensor 'split:3' shape=<unknown> dtype=int32>, 'ids': <tf.Tensor 'split_1:3' shape=(32, 1024) dtype=int32>, 'labels': <tf.Tensor 'split_2:3' shape=(32, 1024) dtype=int32>, 'paddings': <tf.Tensor 'split_3:3' shape=(32, 1024) dtype=float32>, 'weights': <tf.Tensor 'split_4:3' shape=(32, 1024) dtype=float32>, 'word_count': <tf.Tensor 'split_5:3' shape=(32,) dtype=int32>}]
input_batch [{'bucket_key': <tf.Tensor 'split:0' shape=<unknown> dtype=int32>, 'ids': <tf.Tensor 'split_1:0' shape=(32, 1024) dtype=int32>, 'labels': <tf.Tensor 'split_2:0' shape=(32, 1024) dtype=int32>, 'paddings': <tf.Tensor 'split_3:0' shape=(32, 1024) dtype=float32>, 'weights': <tf.Tensor 'split_4:0' shape=(32, 1024) dtype=float32>, 'word_count': <tf.Tensor 'split_5:0' shape=(32,) dtype=int32>}, {'bucket_key': <tf.Tensor 'split:1' shape=<unknown> dtype=int32>, 'ids': <tf.Tensor 'split_1:1' shape=(32, 1024) dtype=int32>, 'labels': <tf.Tensor 'split_2:1' shape=(32, 1024) dtype=int32>, 'paddings': <tf.Tensor 'split_3:1' shape=(32, 1024) dtype=float32>, 'weights': <tf.Tensor 'split_4:1' shape=(32, 1024) dtype=float32>, 'word_count': <tf.Tensor 'split_5:1' shape=(32,) dtype=int32>}, {'bucket_key': <tf.Tensor 'split:2' shape=<unknown> dtype=int32>, 'ids': <tf.Tensor 'split_1:2' shape=(32, 1024) dtype=int32>, 'labels': <tf.Tensor 'split_2:2' shape=(32, 1024) dtype=int32>, 'paddings': <tf.Tensor 'split_3:2' shape=(32, 1024) dtype=float32>, 'weights': <tf.Tensor 'split_4:2' shape=(32, 1024) dtype=float32>, 'word_count': <tf.Tensor 'split_5:2' shape=(32,) dtype=int32>}, {'bucket_key': <tf.Tensor 'split:3' shape=<unknown> dtype=int32>, 'ids': <tf.Tensor 'split_1:3' shape=(32, 1024) dtype=int32>, 'labels': <tf.Tensor 'split_2:3' shape=(32, 1024) dtype=int32>, 'paddings': <tf.Tensor 'split_3:3' shape=(32, 1024) dtype=float32>, 'weights': <tf.Tensor 'split_4:3' shape=(32, 1024) dtype=float32>, 'word_count': <tf.Tensor 'split_5:3' shape=(32,) dtype=int32>}]
input_batch {'bucket_key': <tf.Tensor 'split:0' shape=<unknown> dtype=int32>, 'ids': <tf.Tensor 'split_1:0' shape=(32, 1024) dtype=int32>, 'labels': <tf.Tensor 'split_2:0' shape=(32, 1024) dtype=int32>, 'paddings': <tf.Tensor 'split_3:0' shape=(32, 1024) dtype=float32>, 'weights': <tf.Tensor 'split_4:0' shape=(32, 1024) dtype=float32>, 'word_count': <tf.Tensor 'split_5:0' shape=(32,) dtype=int32>}
inputs Tensor("fprop/1bwds_wpm_level_lm/tower_0_0/transpose:0", shape=(1024, 32), dtype=int32, device=/job:local/replica:0/task:0/device:GPU:0)
ids Tensor("fprop/1bwds_wpm_level_lm/tower_0_0/transpose:0", shape=(1024, 32), dtype=int32, device=/job:local/replica:0/task:0/device:GPU:0)
source_input Tensor("fprop/1bwds_wpm_level_lm/tower_0_0/transpose:0", shape=(1024, 32), dtype=int32, device=/job:local/replica:0/task:0/device:GPU:0)
args (<tf.Tensor 'fprop/1bwds_wpm_level_lm/tower_0_0/transpose:0' shape=(1024, 32) dtype=int32>, <tf.Tensor 'fprop/1bwds_wpm_level_lm/tower_0_0/Identity:0' shape=(1024, 32) dtype=float32>, None, None, None, None, None, None, None, None)
input_tenors[0] Tensor("fprop/1bwds_wpm_level_lm/tower_0_0/transpose:0", shape=(1024, 32), dtype=int32, device=/job:local/replica:0/task:0/device:GPU:0)
num_micro_batches 32
mini_batch_size 32
input_tenors[0].get_shape() (1024, 32)
p.batch_dim 1
input_batch [{'bucket_key': <tf.Tensor 'split:0' shape=<unknown> dtype=int32>, 'ids': <tf.Tensor 'split_1:0' shape=(32, 1024) dtype=int32>, 'labels': <tf.Tensor 'split_2:0' shape=(32, 1024) dtype=int32>, 'paddings': <tf.Tensor 'split_3:0' shape=(32, 1024) dtype=float32>, 'weights': <tf.Tensor 'split_4:0' shape=(32, 1024) dtype=float32>, 'word_count': <tf.Tensor 'split_5:0' shape=(32,) dtype=int32>}, {'bucket_key': <tf.Tensor 'split:1' shape=<unknown> dtype=int32>, 'ids': <tf.Tensor 'split_1:1' shape=(32, 1024) dtype=int32>, 'labels': <tf.Tensor 'split_2:1' shape=(32, 1024) dtype=int32>, 'paddings': <tf.Tensor 'split_3:1' shape=(32, 1024) dtype=float32>, 'weights': <tf.Tensor 'split_4:1' shape=(32, 1024) dtype=float32>, 'word_count': <tf.Tensor 'split_5:1' shape=(32,) dtype=int32>}, {'bucket_key': <tf.Tensor 'split:2' shape=<unknown> dtype=int32>, 'ids': <tf.Tensor 'split_1:2' shape=(32, 1024) dtype=int32>, 'labels': <tf.Tensor 'split_2:2' shape=(32, 1024) dtype=int32>, 'paddings': <tf.Tensor 'split_3:2' shape=(32, 1024) dtype=float32>, 'weights': <tf.Tensor 'split_4:2' shape=(32, 1024) dtype=float32>, 'word_count': <tf.Tensor 'split_5:2' shape=(32,) dtype=int32>}, {'bucket_key': <tf.Tensor 'split:3' shape=<unknown> dtype=int32>, 'ids': <tf.Tensor 'split_1:3' shape=(32, 1024) dtype=int32>, 'labels': <tf.Tensor 'split_2:3' shape=(32, 1024) dtype=int32>, 'paddings': <tf.Tensor 'split_3:3' shape=(32, 1024) dtype=float32>, 'weights': <tf.Tensor 'split_4:3' shape=(32, 1024) dtype=float32>, 'word_count': <tf.Tensor 'split_5:3' shape=(32,) dtype=int32>}]
input_batch {'bucket_key': <tf.Tensor 'split:1' shape=<unknown> dtype=int32>, 'ids': <tf.Tensor 'split_1:1' shape=(32, 1024) dtype=int32>, 'labels': <tf.Tensor 'split_2:1' shape=(32, 1024) dtype=int32>, 'paddings': <tf.Tensor 'split_3:1' shape=(32, 1024) dtype=float32>, 'weights': <tf.Tensor 'split_4:1' shape=(32, 1024) dtype=float32>, 'word_count': <tf.Tensor 'split_5:1' shape=(32,) dtype=int32>}
inputs Tensor("fprop/1bwds_wpm_level_lm/tower_0_1/transpose:0", shape=(1024, 32), dtype=int32, device=/job:local/replica:0/task:0/device:GPU:1)
ids Tensor("fprop/1bwds_wpm_level_lm/tower_0_1/transpose:0", shape=(1024, 32), dtype=int32, device=/job:local/replica:0/task:0/device:GPU:1)
source_input Tensor("fprop/1bwds_wpm_level_lm/tower_0_1/transpose:0", shape=(1024, 32), dtype=int32, device=/job:local/replica:0/task:0/device:GPU:1)
args (<tf.Tensor 'fprop/1bwds_wpm_level_lm/tower_0_1/transpose:0' shape=(1024, 32) dtype=int32>, <tf.Tensor 'fprop/1bwds_wpm_level_lm/tower_0_1/Identity:0' shape=(1024, 32) dtype=float32>, None, None, None, None, None, None, None, None)
input_tenors[0] Tensor("fprop/1bwds_wpm_level_lm/tower_0_1/transpose:0", shape=(1024, 32), dtype=int32, device=/job:local/replica:0/task:0/device:GPU:1)
num_micro_batches 32
mini_batch_size 32
input_tenors[0].get_shape() (1024, 32)
p.batch_dim 1
